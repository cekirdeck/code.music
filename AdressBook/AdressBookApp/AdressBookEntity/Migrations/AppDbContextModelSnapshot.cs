// <auto-generated />
using AdressBookData.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdressBookData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdressBook.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("EmailAdress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.HasKey("Id");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("SurName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCompany")
                        .HasColumnType("int")
                        .HasColumnName("idCompany");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("idPerson");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdPerson");

                    b.ToTable("Person_N_Company", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEmail")
                        .HasColumnType("int")
                        .HasColumnName("idEmail");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("idPerson");

                    b.HasKey("Id");

                    b.HasIndex("IdEmail");

                    b.HasIndex("IdPerson");

                    b.ToTable("Person_N_Email", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdLocation")
                        .HasColumnType("int")
                        .HasColumnName("idLocation");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("idPerson");

                    b.HasKey("Id");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdPerson");

                    b.ToTable("Person_N_Location", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("idPerson");

                    b.Property<int>("IdPhone")
                        .HasColumnType("int")
                        .HasColumnName("idPhone");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdPhone");

                    b.ToTable("Person_N_Phone", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("phoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Phone", (string)null);
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Company", b =>
                {
                    b.HasOne("AdressBook.Models.Company", "IdCompanyNavigation")
                        .WithMany("Person_N_Companies")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERSON_N_COMPANY_COMPANY");

                    b.HasOne("AdressBook.Models.Person", "IdPersonNavigation")
                        .WithMany("Person_N_Companies")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERSON_N_COMPANY_PERSON");

                    b.Navigation("IdCompanyNavigation");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Email", b =>
                {
                    b.HasOne("AdressBook.Models.Email", "IdEmailNavigation")
                        .WithMany("Person_N_Emails")
                        .HasForeignKey("IdEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKPERSON_N_EMAIL_EMAIL");

                    b.HasOne("AdressBook.Models.Person", "IdPersonNavigation")
                        .WithMany("Person_N_Emails")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERSON_N_EMAIL_PERSON");

                    b.Navigation("IdEmailNavigation");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Location", b =>
                {
                    b.HasOne("AdressBook.Models.Location", "IdLocationNavigation")
                        .WithMany("Person_N_Locations")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKPERSON_N_LOCATION_LOCATION");

                    b.HasOne("AdressBook.Models.Person", "IdPersonNavigation")
                        .WithMany("Person_N_Locations")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERSON_N_LOCATION_PERSON");

                    b.Navigation("IdLocationNavigation");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("AdressBook.Models.Person_N_Phone", b =>
                {
                    b.HasOne("AdressBook.Models.Person", "IdPersonNavigation")
                        .WithMany("Person_N_Phones")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERSON_N_PHONE_PERSON");

                    b.HasOne("AdressBook.Models.Phone", "IdPhoneNavigation")
                        .WithMany("Person_N_Phones")
                        .HasForeignKey("IdPhone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKPERSON_N_PHONE_PHONE");

                    b.Navigation("IdPersonNavigation");

                    b.Navigation("IdPhoneNavigation");
                });

            modelBuilder.Entity("AdressBook.Models.Company", b =>
                {
                    b.Navigation("Person_N_Companies");
                });

            modelBuilder.Entity("AdressBook.Models.Email", b =>
                {
                    b.Navigation("Person_N_Emails");
                });

            modelBuilder.Entity("AdressBook.Models.Location", b =>
                {
                    b.Navigation("Person_N_Locations");
                });

            modelBuilder.Entity("AdressBook.Models.Person", b =>
                {
                    b.Navigation("Person_N_Companies");

                    b.Navigation("Person_N_Emails");

                    b.Navigation("Person_N_Locations");

                    b.Navigation("Person_N_Phones");
                });

            modelBuilder.Entity("AdressBook.Models.Phone", b =>
                {
                    b.Navigation("Person_N_Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
